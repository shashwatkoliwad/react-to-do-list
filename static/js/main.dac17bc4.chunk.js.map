{"version":3,"sources":["components/input.js","components/todoList.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","react_default","a","createElement","type","onKeyPress","handleKeyPress","ToDoList","onChange","checkBoxEvent","htmlFor","list","onClick","delTask","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","checked","console","log","nextSibling","style","textDecoration","index","tasks","assign","state","toDoList","splice","setState","id","task","keyVal","bind","assertThisInitialized","_this2","toDo","uuid","v4","value","status","key","preventDefault","undefined","concat","toConsumableArray","_this3","className","input","map","todoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAUeA,SARD,SAACC,GACb,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,WAAYL,EAAMM,oCCQ5BC,EAVE,SAACP,GAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,WAAWI,SAAUR,EAAMS,gBACvCR,EAAAC,EAAAC,cAAA,MAAIO,QAAQ,UAAUV,EAAMW,MAC5BV,EAAAC,EAAAC,cAAA,UAAQS,QAASZ,EAAMa,SAAvB,YCkDSC,cAnDb,SAAAA,EAAYd,GAAM,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KAqBRS,cAAe,SAACa,GACZA,EAAEC,OAAOC,QACVC,QAAQC,IAAIJ,EAAEC,OAAOI,YAAYC,MAAMC,eAAiB,gBAGtDP,EAAEC,OAAOI,YAAYC,MAAMC,eAAiB,QA3B7Bd,EAiCpBF,QAAQ,SAACiB,EAAOR,GACb,IAAMS,EAAQf,OAAOgB,OAAO,GAAGjB,EAAKkB,MAAMC,UAC1CH,EAAMI,OAAOL,EAAO,GACpBf,EAAKqB,SAAS,CAACF,SAASH,KAlCzBhB,EAAKkB,MAAM,CACTC,SAAS,CAAC,CAACG,GAAG,EAAGC,KAAK,SAEvBvB,EAAKwB,OAASxB,EAAKwB,OAAOC,KAAZxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACdA,EAAKN,cAAgBM,EAAKN,cAAc+B,KAAnBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KANJA,sEASZO,GAAE,IAAAoB,EAAAxB,KACHyB,EAAO,CAACN,GAAGO,IAAKC,KAAKP,KAAKhB,EAAEC,OAAOuB,MAAMC,QAAO,GACvC,UAAVzB,EAAE0B,MACH1B,EAAE2B,sBACoBC,IAAnB5B,EAAEC,OAAOuB,OACZ5B,KAAKkB,SAAS,CACZF,SAAQ,GAAAiB,OAAAnC,OAAAoC,EAAA,EAAApC,CAAME,KAAKe,MAAMC,UAAjB,CAA2BS,KAClC,WAAOlB,QAAQC,IAAIgB,EAAKT,MAAMC,YACjCZ,EAAEC,OAAOuB,MAAQ,qCAsBZ,IAAAO,EAAAnC,KACN,OACEjB,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,OACbrD,EAAAC,EAAAC,cAACoD,EAAD,CAAOjD,eAAgBY,KAAKqB,SACzBrB,KAAKe,MAAMC,SAASsB,IAAI,SAAC7C,EAAMmB,GAAP,OAAiB7B,EAAAC,EAAAC,cAACsD,EAAD,CAAU9C,KAAMA,EAAK2B,KAC9D7B,cAAe4C,EAAK5C,cACpBI,QAASwC,EAAKxC,QAAQ2B,KAAKa,EAAKvB,eA9CzB4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dac17bc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = (props) =>{\r\n  return(\r\n    <div>\r\n      <input type=\"text\" onKeyPress={props.handleKeyPress} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\n\r\nconst ToDoList = (props) => {\r\n  return(\r\n    <div>\r\n      <input type=\"checkbox\" onChange={props.checkBoxEvent}/>\r\n      <li htmlFor='opt-in'>{props.list}</li>\r\n      <button onClick={props.delTask}>Delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Input from './components/input';\nimport uuid from 'uuid';\nimport ToDoList from './components/todoList';\n\nclass App extends Component {\n  constructor(props){\n  super(props);\n  this.state={\n    toDoList:[{id:1, task:\"abc\"}]\n   }\n   this.keyVal = this.keyVal.bind(this);\n   this.checkBoxEvent = this.checkBoxEvent.bind(this);\n }\n\n keyVal(e){\n   let toDo = {id:uuid.v4(),task:e.target.value,status:false}\n   if(e.key === \"Enter\"){\n     e.preventDefault();\n     if(e.target.value !== undefined){\n     this.setState({\n       toDoList: [...this.state.toDoList, toDo]\n     }, () => {console.log(this.state.toDoList);});}\n     e.target.value = \"\";\n   }\n\n }\n\ncheckBoxEvent= (e)=>{\n if(e.target.checked){\n   console.log(e.target.nextSibling.style.textDecoration = \"line-through\");\n }\n   else{\n     e.target.nextSibling.style.textDecoration = \"null\";\n   }\n\n }\n\n\ndelTask=(index, e) =>{\n   const tasks = Object.assign([],this.state.toDoList);\n   tasks.splice(index, 1);\n   this.setState({toDoList:tasks})\n}\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Input handleKeyPress={this.keyVal} />\n          {this.state.toDoList.map((list, index) => <ToDoList list={list.task}\n           checkBoxEvent={this.checkBoxEvent}\n           delTask={this.delTask.bind(this,index)}/>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}